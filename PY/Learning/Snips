#!/usr/bin/env python3

def add(e,y):
    x = a + b
    return x
def shift_right(e,d):
    y = e>>d
    return y

if __name__ == '__main__':
    name =input('Please enter your name: ')
    print(f'Hello {name}, and welcome to Python')
    a = int(input('Please enter a number: '))
    b = int(input('Please enter another number: '))
    answer1 = add(a,b)
    answer2 = shift_right(a,b)
    print(f'{a} >> {b} = {answer2}')
    print(f'{a} + {b} = {answer1}')
~                                     

#!/usr/bin/env python3
"""
Script outline for first script lab
Author: Joff Thyer, 2022
"""
# are we running as a script?
if __name__ == '__main__':
    name = input('Please enter your name: ')
    print(f'Hello {name}, and welcome to Python')
    a = int(input('Please enter a number: '))
    b = int(input('Please enter another number: '))
    print(f'{a} * {b} = {a*b}')
    print(f'{a} << {b} = {a<<b}')
~                                                                                 
~                                         
def xor(x, y):
    theanswer = x^y
    return theanswer

def modulus(x, y):
    theanswer= x % y
    return theanswer
if __name__ == '__main__':
    print(f'xor test: {xor(10, 20)}')
   #same for modulus
    print(f'modulus test: {modulus(10, 20)}')

#!/usr/bin/env python3
import mymath 
if __name__ == '__main__':

    print(f"You have imported the module named: {mymath.__name__}")
    name = input(f'Please enter your name: ')
    print(f'Hello {name}, and welcome to Python.')
    a = int(input(f'Please enter a number: '))
    b = int(input(f'Please enter another number: '))
    answer1 = mymath.xor(a,b)
    answer2 = mymath.modulus(a,b)
    print(f'{a} ^ {b} = {answer1}')
    print(f'{a} % {b} = {answer2}')



~                                                                                                   
~                                         
import random
ans=5
guess=0
while True:
    guess = random.randint(3,7)
    print(f"Computer guesses: {guess}")
    if guess != ans:
            continue #next iteration of loop
    print('Winner!')
    break #break out of loop altogether

~
import argparse
parser = argparse.ArgumentParser()
~
import hashlib
m= hashlib.sha256()
m.update(b"Nobody inspects")
m.update(b" the spammish repetition")
m.digest
<built-in method digest of _hashlib.HASH object at 0x7f27906cced0>
m.digest()
b'\x03\x1e\xdd}Ae\x15\x93\xc5\xfe\\\x00o\xa5u+7\xfd\xdf\xf7\xbcN\x84:\xa6\xaf\x0c\x95\x0fK\x94\x06'
m.hexdigest()
'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406'
hashlib.sha256(b"Nobody inspects the spammish repetition").hexdigest()
'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406'
~
import requests
import json
a.requests.get("https://ipapi.co/9.9.9.9/json")
print(json.dumps(a.json(), indent=4))
~ 
import dns.resolver
resolver = dns.resolver.Resolver(configure=False)
#Don't use the OS (etc/resolv.conf) defaults ^
resolver.nameservers = ['9.9.9.9']
answers = resolver.resolve("rivergumsecurity.org", "NS")
for a in answers:
    print(a)

~
~
s3 = boto3.client(service_name='s3')
    all_objects = s3.list_objects_v2(Bucket='flaws.cloud')
    print('Flaws.Cloud')
    print('-----------')
    for o in all_objects['Contents']:
        key = o['Key']
        size = o['Size']
        # Note that last modified is a datetime.datetime object
        lm = o['LastModified'].strftime('%Y/%m/%d %H:%M:%S')
        print(f"[*] {key} ({size} bytes), last modified: {lm}")

        # create a byte buffer that looks like a file handle
        buf = io.BytesIO()
        s3.download_fileobj(Bucket='flaws.cloud', Key=key, Fileobj=buf)
        print('[+] initial 30 bytes: [{}]'.format(buf.getvalue()[:30]))
        print('')
~
~
from datetime import datetime
a= datetime.utcnow()
a

------------ENCRYPTION--------------------
import base64
import hashlib
import os

from cryptography.hazmat.backends import default_backend
from cryptogrpahy.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.fernet import Fernet

# SALT = <Insert salt here>

def encode_message(message,password,salt):
    



#derive encryption key from password using PBKDF2
    kdf = PBKDF2HMAC(algorithm=hashes.sha256,
                    iterations=10000,
                    salt = salt,
                    length=32,
                    backend=default_backend())
    key = bas64.urlsafe_b64encode(kdf.derive(password))
#Encrypt the message using the derived key
fernet = Fernet(key)
encrypted_message = fernet.encrypt(message.encode())
return encrypted_message
-----------------------------------------------------
PORT SCANNER (NMAP program must be installed as python uses its libraries to import to python)
#!/usr/bin/env python3

import nmap
import sys 
import time

nm_scan = nmap.PortScanner()
print(f"'\n'Running...'\n'")
nm_scanner = nm_scan.scan(sys.argv[1],'80',arguments='-O')

host_up = "The host is: "+nm_scanner['scan'][sys.argv[1]]['status']['state']+".\n"
port_state = "Port 80 is: "+nm_scanner['scan'][sys.argv[1]]['tcp'][80]['state']+".\n"
method_scan= "The method of scanning is: "+nm_scanner['scan'][sys.argv[1]]['tcp'][80]['reason']+".\n"
guess_os = "There is a %s chance that the host is running %s"%(nm_scanner['scan'][sys.argv[1]]['osmatch'][0]['accuracy'],nm_scanner['scan'][sys.argv[1]]['osmatch'][0]['name'])+".\n"

with open("%s.txt"%sys.argv[1],'w') as f:
    f.write(str(host_up)+str(port_state)+str(method_scan)+str(guess_os))
    f.write(f"\nReport Generated "+time.strftime("%Y-%m-%d_%H:%M:%S GMT",time.gmtime()))

print("\n Finished.")

